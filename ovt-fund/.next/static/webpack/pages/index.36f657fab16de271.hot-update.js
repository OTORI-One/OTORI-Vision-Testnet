"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/hooks/useOVTClient.ts":
/*!***********************************!*\
  !*** ./src/hooks/useOVTClient.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useOVTClient: function() { return /* binding */ useOVTClient; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// Mock initial portfolio data\nconst INITIAL_PORTFOLIO_ITEMS = [\n    {\n        name: \"BitFighters\",\n        value: 200000,\n        change: 342,\n        description: \"On Chain Gaming\"\n    },\n    {\n        name: \"Polymorphic Labs\",\n        value: 150000,\n        change: 342,\n        description: \"Encryption Layer\"\n    },\n    {\n        name: \"MIXDTape\",\n        value: 100000,\n        change: 342,\n        description: \"Phygital Music for superfans - disrupting Streaming\"\n    }\n];\n// Simulate portfolio value changes\nfunction simulatePortfolioChange(items) {\n    return items.map((item)=>({\n            ...item,\n            value: item.value * (1 + (Math.random() * 0.02 - 0.01)),\n            change: item.change + (Math.random() * 10 - 5 // Adjust change percentage\n            )\n        }));\n}\nfunction useOVTClient() {\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [navData, setNavData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        totalValue: \"$450k\",\n        changePercentage: \"+342%\",\n        portfolioItems: INITIAL_PORTFOLIO_ITEMS\n    });\n    // Simulate periodic NAV updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const interval = setInterval(()=>{\n            setNavData((prev)=>{\n                const updatedItems = simulatePortfolioChange(prev.portfolioItems);\n                const totalValue = updatedItems.reduce((sum, item)=>sum + item.value, 0);\n                const averageChange = updatedItems.reduce((sum, item)=>sum + item.change, 0) / updatedItems.length;\n                return {\n                    totalValue: \"$\".concat((totalValue / 1000000).toFixed(2), \"M\"),\n                    changePercentage: \"\".concat(averageChange >= 0 ? \"+\" : \"\").concat(averageChange.toFixed(1), \"%\"),\n                    portfolioItems: updatedItems\n                };\n            });\n        }, 30000); // Update every 30 seconds\n        return ()=>clearInterval(interval);\n    }, []);\n    const buyOVT = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (amount)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            // Convert amount to sats based on current NAV\n            const totalValue = parseFloat(navData.totalValue.replace(/[^0-9.]/g, \"\")) * 1000000; // Convert from millions\n            const ovtPrice = totalValue / 1000000; // Assuming 1M total OVT supply\n            const btcPrice = 40000; // TODO: Get real BTC price\n            const amountInSats = Math.floor(amount * ovtPrice / btcPrice * 100000000);\n            // TODO: Implement actual buy logic with Arch Network\n            console.log(\"Buying \".concat(amount, \" OVT (\").concat(amountInSats, \" sats) at $\").concat(ovtPrice.toFixed(2), \" per OVT\"));\n            // Simulate API call\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"Failed to buy OVT\");\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        navData.totalValue\n    ]);\n    const sellOVT = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (amount)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            // Convert amount to sats based on current NAV\n            const totalValue = parseFloat(navData.totalValue.replace(/[^0-9.]/g, \"\")) * 1000000;\n            const ovtPrice = totalValue / 1000000; // Assuming 1M total OVT supply\n            const btcPrice = 40000; // TODO: Get real BTC price\n            const amountInSats = Math.floor(amount * ovtPrice / btcPrice * 100000000);\n            // TODO: Implement actual sell logic with Arch Network\n            console.log(\"Selling \".concat(amount, \" OVT (\").concat(amountInSats, \" sats) at $\").concat(ovtPrice.toFixed(2), \" per OVT\"));\n            // Simulate API call\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"Failed to sell OVT\");\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        navData.totalValue\n    ]);\n    const fetchNAV = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            // Here we'll integrate with the Arch Network to fetch real NAV data\n            // For now, return the simulated data\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            return navData;\n        } catch (err) {\n            setError(err.message || \"Failed to fetch NAV\");\n            throw err;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        navData\n    ]);\n    return {\n        isLoading,\n        error,\n        navData,\n        buyOVT,\n        sellOVT,\n        fetchNAV\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWU7UUFDQWdCO1FBQ0FDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaG9va3MvdXNlT1ZUQ2xpZW50LnRzPzQ3ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUG9ydGZvbGlvIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdmFsdWU6IG51bWJlcjtcclxuICBjaGFuZ2U6IG51bWJlcjtcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIGluaXRpYWw6IG51bWJlcjtcclxuICBjdXJyZW50OiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBOQVZEYXRhIHtcclxuICB0b3RhbFZhbHVlOiBzdHJpbmc7XHJcbiAgY2hhbmdlUGVyY2VudGFnZTogc3RyaW5nO1xyXG4gIHBvcnRmb2xpb0l0ZW1zOiBQb3J0Zm9saW9bXTtcclxufVxyXG5cclxuLy8gTW9jayBpbml0aWFsIHBvcnRmb2xpbyBkYXRhXHJcbmNvbnN0IElOSVRJQUxfUE9SVEZPTElPX0lURU1TID0gW1xyXG4gIHtcclxuICAgIG5hbWU6ICdCaXRGaWdodGVycycsXHJcbiAgICB2YWx1ZTogMjAwMDAwLCAvLyAkMjAwa1xyXG4gICAgY2hhbmdlOiAzNDIsXHJcbiAgICBkZXNjcmlwdGlvbjogJ09uIENoYWluIEdhbWluZydcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICdQb2x5bW9ycGhpYyBMYWJzJyxcclxuICAgIHZhbHVlOiAxNTAwMDAsIC8vICQxNTBrXHJcbiAgICBjaGFuZ2U6IDM0MixcclxuICAgIGRlc2NyaXB0aW9uOiAnRW5jcnlwdGlvbiBMYXllcidcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICdNSVhEVGFwZScsXHJcbiAgICB2YWx1ZTogMTAwMDAwLCAvLyAkMTAwa1xyXG4gICAgY2hhbmdlOiAzNDIsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1BoeWdpdGFsIE11c2ljIGZvciBzdXBlcmZhbnMgLSBkaXNydXB0aW5nIFN0cmVhbWluZydcclxuICB9XHJcbl07XHJcblxyXG4vLyBTaW11bGF0ZSBwb3J0Zm9saW8gdmFsdWUgY2hhbmdlc1xyXG5mdW5jdGlvbiBzaW11bGF0ZVBvcnRmb2xpb0NoYW5nZShpdGVtczogUG9ydGZvbGlvW10pOiBQb3J0Zm9saW9bXSB7XHJcbiAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+ICh7XHJcbiAgICAuLi5pdGVtLFxyXG4gICAgdmFsdWU6IGl0ZW0udmFsdWUgKiAoMSArIChNYXRoLnJhbmRvbSgpICogMC4wMiAtIDAuMDEpKSwgLy8gUmFuZG9tIC0xJSB0byArMSUgY2hhbmdlXHJcbiAgICBjaGFuZ2U6IGl0ZW0uY2hhbmdlICsgKE1hdGgucmFuZG9tKCkgKiAxMCAtIDUpIC8vIEFkanVzdCBjaGFuZ2UgcGVyY2VudGFnZVxyXG4gIH0pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU9WVENsaWVudCgpIHtcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgW25hdkRhdGEsIHNldE5hdkRhdGFdID0gdXNlU3RhdGU8TkFWRGF0YT4oe1xyXG4gICAgdG90YWxWYWx1ZTogJyQ0NTBrJyxcclxuICAgIGNoYW5nZVBlcmNlbnRhZ2U6ICcrMzQyJScsXHJcbiAgICBwb3J0Zm9saW9JdGVtczogSU5JVElBTF9QT1JURk9MSU9fSVRFTVNcclxuICB9KTtcclxuXHJcbiAgLy8gU2ltdWxhdGUgcGVyaW9kaWMgTkFWIHVwZGF0ZXNcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHNldE5hdkRhdGEocHJldiA9PiB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gc2ltdWxhdGVQb3J0Zm9saW9DaGFuZ2UocHJldi5wb3J0Zm9saW9JdGVtcyk7XHJcbiAgICAgICAgY29uc3QgdG90YWxWYWx1ZSA9IHVwZGF0ZWRJdGVtcy5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS52YWx1ZSwgMCk7XHJcbiAgICAgICAgY29uc3QgYXZlcmFnZUNoYW5nZSA9IHVwZGF0ZWRJdGVtcy5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS5jaGFuZ2UsIDApIC8gdXBkYXRlZEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdG90YWxWYWx1ZTogYCQkeyh0b3RhbFZhbHVlIC8gMTAwMDAwMCkudG9GaXhlZCgyKX1NYCxcclxuICAgICAgICAgIGNoYW5nZVBlcmNlbnRhZ2U6IGAke2F2ZXJhZ2VDaGFuZ2UgPj0gMCA/ICcrJyA6ICcnfSR7YXZlcmFnZUNoYW5nZS50b0ZpeGVkKDEpfSVgLFxyXG4gICAgICAgICAgcG9ydGZvbGlvSXRlbXM6IHVwZGF0ZWRJdGVtc1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMzAwMDApOyAvLyBVcGRhdGUgZXZlcnkgMzAgc2Vjb25kc1xyXG5cclxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGJ1eU9WVCA9IHVzZUNhbGxiYWNrKGFzeW5jIChhbW91bnQ6IG51bWJlcikgPT4ge1xyXG4gICAgc2V0SXNMb2FkaW5nKHRydWUpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDb252ZXJ0IGFtb3VudCB0byBzYXRzIGJhc2VkIG9uIGN1cnJlbnQgTkFWXHJcbiAgICAgIGNvbnN0IHRvdGFsVmFsdWUgPSBwYXJzZUZsb2F0KG5hdkRhdGEudG90YWxWYWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKSkgKiAxMDAwMDAwOyAvLyBDb252ZXJ0IGZyb20gbWlsbGlvbnNcclxuICAgICAgY29uc3Qgb3Z0UHJpY2UgPSB0b3RhbFZhbHVlIC8gMTAwMDAwMDsgLy8gQXNzdW1pbmcgMU0gdG90YWwgT1ZUIHN1cHBseVxyXG4gICAgICBjb25zdCBidGNQcmljZSA9IDQwMDAwOyAvLyBUT0RPOiBHZXQgcmVhbCBCVEMgcHJpY2VcclxuICAgICAgY29uc3QgYW1vdW50SW5TYXRzID0gTWF0aC5mbG9vcigoYW1vdW50ICogb3Z0UHJpY2UgLyBidGNQcmljZSkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBcclxuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGFjdHVhbCBidXkgbG9naWMgd2l0aCBBcmNoIE5ldHdvcmtcclxuICAgICAgY29uc29sZS5sb2coYEJ1eWluZyAke2Ftb3VudH0gT1ZUICgke2Ftb3VudEluU2F0c30gc2F0cykgYXQgJCR7b3Z0UHJpY2UudG9GaXhlZCgyKX0gcGVyIE9WVGApO1xyXG4gICAgICBcclxuICAgICAgLy8gU2ltdWxhdGUgQVBJIGNhbGxcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzZXRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBidXkgT1ZUJyk7XHJcbiAgICAgIHRocm93IGVycjtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSwgW25hdkRhdGEudG90YWxWYWx1ZV0pO1xyXG5cclxuICBjb25zdCBzZWxsT1ZUID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFtb3VudDogbnVtYmVyKSA9PiB7XHJcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICBzZXRFcnJvcihudWxsKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENvbnZlcnQgYW1vdW50IHRvIHNhdHMgYmFzZWQgb24gY3VycmVudCBOQVZcclxuICAgICAgY29uc3QgdG90YWxWYWx1ZSA9IHBhcnNlRmxvYXQobmF2RGF0YS50b3RhbFZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpKSAqIDEwMDAwMDA7XHJcbiAgICAgIGNvbnN0IG92dFByaWNlID0gdG90YWxWYWx1ZSAvIDEwMDAwMDA7IC8vIEFzc3VtaW5nIDFNIHRvdGFsIE9WVCBzdXBwbHlcclxuICAgICAgY29uc3QgYnRjUHJpY2UgPSA0MDAwMDsgLy8gVE9ETzogR2V0IHJlYWwgQlRDIHByaWNlXHJcbiAgICAgIGNvbnN0IGFtb3VudEluU2F0cyA9IE1hdGguZmxvb3IoKGFtb3VudCAqIG92dFByaWNlIC8gYnRjUHJpY2UpICogMTAwMDAwMDAwKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFRPRE86IEltcGxlbWVudCBhY3R1YWwgc2VsbCBsb2dpYyB3aXRoIEFyY2ggTmV0d29ya1xyXG4gICAgICBjb25zb2xlLmxvZyhgU2VsbGluZyAke2Ftb3VudH0gT1ZUICgke2Ftb3VudEluU2F0c30gc2F0cykgYXQgJCR7b3Z0UHJpY2UudG9GaXhlZCgyKX0gcGVyIE9WVGApO1xyXG4gICAgICBcclxuICAgICAgLy8gU2ltdWxhdGUgQVBJIGNhbGxcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzZXRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBzZWxsIE9WVCcpO1xyXG4gICAgICB0aHJvdyBlcnI7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH0sIFtuYXZEYXRhLnRvdGFsVmFsdWVdKTtcclxuXHJcbiAgY29uc3QgZmV0Y2hOQVYgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICBzZXRFcnJvcihudWxsKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEhlcmUgd2UnbGwgaW50ZWdyYXRlIHdpdGggdGhlIEFyY2ggTmV0d29yayB0byBmZXRjaCByZWFsIE5BViBkYXRhXHJcbiAgICAgIC8vIEZvciBub3csIHJldHVybiB0aGUgc2ltdWxhdGVkIGRhdGFcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcclxuICAgICAgcmV0dXJuIG5hdkRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgICBzZXRFcnJvcihlcnIubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGZldGNoIE5BVicpO1xyXG4gICAgICB0aHJvdyBlcnI7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH0sIFtuYXZEYXRhXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICAgIG5hdkRhdGEsXHJcbiAgICBidXlPVlQsXHJcbiAgICBzZWxsT1ZULFxyXG4gICAgZmV0Y2hOQVZcclxuICB9O1xyXG59ICJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwiSU5JVElBTF9QT1JURk9MSU9fSVRFTVMiLCJuYW1lIiwidmFsdWUiLCJjaGFuZ2UiLCJkZXNjcmlwdGlvbiIsInNpbXVsYXRlUG9ydGZvbGlvQ2hhbmdlIiwiaXRlbXMiLCJtYXAiLCJpdGVtIiwiTWF0aCIsInJhbmRvbSIsInVzZU9WVENsaWVudCIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJuYXZEYXRhIiwic2V0TmF2RGF0YSIsInRvdGFsVmFsdWUiLCJjaGFuZ2VQZXJjZW50YWdlIiwicG9ydGZvbGlvSXRlbXMiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwicHJldiIsInVwZGF0ZWRJdGVtcyIsInJlZHVjZSIsInN1bSIsImF2ZXJhZ2VDaGFuZ2UiLCJsZW5ndGgiLCJ0b0ZpeGVkIiwiY2xlYXJJbnRlcnZhbCIsImJ1eU9WVCIsImFtb3VudCIsInBhcnNlRmxvYXQiLCJyZXBsYWNlIiwib3Z0UHJpY2UiLCJidGNQcmljZSIsImFtb3VudEluU2F0cyIsImZsb29yIiwiY29uc29sZSIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsInNlbGxPVlQiLCJmZXRjaE5BViJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/hooks/useOVTClient.ts\n"));

/***/ })

});